import tiles.*
import items.*
import statusBar.*

describe "Recipe requirements test"{
	var tomato = new Ingredient(name="tomato",state="new")
	var lettuce = new Ingredient(name="lettuce",state="new")
	var meat = new Ingredient(name="meat",state="cut")
	var recipeTL = new Recipe(name="tl",ingredients=[tomato,lettuce])
	var recipeTTL = new Recipe(name="ttl",ingredients=[tomato,tomato,lettuce])
	var plateTL = new Plate(ingredients=[tomato,lettuce])
	var plateLT = new Plate(ingredients=[lettuce,tomato])
	var plateTTL = new Plate(ingredients=[tomato,tomato,lettuce])
	var plateTM = new Plate(ingredients=[tomato,meat])
	var plateLTCut = new Plate(ingredients=[lettuce,new Ingredient(name="tomato",state="cut")])
	
	test "Same ingredients are accepted" {
		assert.that(recipeTL.plateMeetsRequierements(plateTL))
	}
	
	test "Same ingredients, (with more than one per type) is accepted" {
		assert.that(recipeTTL.plateMeetsRequierements(plateTTL))
	}
	
	test "Less ingredient types are not accepted" {
		assert.notThat(recipeTL.plateMeetsRequierements(new Plate(ingredients=[tomato])))
	}
	
	test "Extra ingredient types are not accepted" {
		assert.notThat(new Recipe(name="t",ingredients=[tomato]).plateMeetsRequierements(plateTL))
	}
	
	test "Different ingredient types are not accepted" {
		assert.notThat(recipeTL.plateMeetsRequierements(plateTM))
	}
	
	test "different order is accepted" {
		assert.that(recipeTL.plateMeetsRequierements(plateLT))
	}
	
	test "all ingredients ok but fewer than expected is not accepted" {
		assert.notThat(recipeTTL.plateMeetsRequierements(plateTL))
	}
	
	test "all ingredients ok but more than expected is not accepted" {
		assert.notThat(recipeTL.plateMeetsRequierements(plateTTL))
	}
	
	// State of expected plate ingredients
	
	test "If one ingredient is in a different state it is not accepted" {
		assert.notThat(recipeTL.plateMeetsRequierements(plateLTCut))
	}
	
	test "If one repeated ingredient is in a different state it is not accepted" {
		plateLTCut.ingredients().add(tomato)
		assert.notThat(recipeTTL.plateMeetsRequierements(plateLTCut))
	}
}
	